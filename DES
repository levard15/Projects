PI = [58, 50, 42, 34, 26, 18, 10, 2,
      60, 52, 44, 36, 28, 20, 12, 4,
      62, 54, 46, 38, 30, 22, 14, 6,
      64, 56, 48, 40, 32, 24, 16, 8,
      57, 49, 41, 33, 25, 17, 9, 1,
      59, 51, 43, 35, 27, 19, 11, 3,
      61, 53, 45, 37, 29, 21, 13, 5,
      63, 55, 47, 39, 31, 23, 15, 7]

CP_1 = [57, 49, 41, 33, 25, 17, 9,
        1, 58, 50, 42, 34, 26, 18,
        10, 2, 59, 51, 43, 35, 27,
        19, 11, 3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15,
        7, 62, 54, 46, 38, 30, 22,
        14, 6, 61, 53, 45, 37, 29,
        21, 13, 5, 28, 20, 12, 4]

CP_2 = [14, 17, 11, 24, 1, 5, 3, 28,
        15, 6, 21, 10, 23, 19, 12, 4,
        26, 8, 16, 7, 27, 20, 13, 2,
        41, 52, 31, 37, 47, 55, 30, 40,
        51, 45, 33, 48, 44, 49, 39, 56,
        34, 53, 46, 42, 50, 36, 29, 32]

E = [32, 1, 2, 3, 4, 5,
     4, 5, 6, 7, 8, 9,
     8, 9, 10, 11, 12, 13,
     12, 13, 14, 15, 16, 17,
     16, 17, 18, 19, 20, 21,
     20, 21, 22, 23, 24, 25,
     24, 25, 26, 27, 28, 29,
     28, 29, 30, 31, 32, 1]

S_BOX = [
    [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
     [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
     [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
     [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],
    ],
    [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
     [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
     [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
     [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],
    ],
    [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
     [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
     [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
     [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],
    ],
    [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
     [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
     [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
     [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],
    ],
    [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
     [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
     [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
     [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],
    ],
    [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
     [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
     [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
     [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],
    ],
    [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
     [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
     [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
     [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],
    ],
    [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
     [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
     [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
     [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],
    ]
]

P = [16, 7, 20, 21, 29, 12, 28, 17,
     1, 15, 23, 26, 5, 18, 31, 10,
     2, 8, 24, 14, 32, 27, 3, 9,
     19, 13, 30, 6, 22, 11, 4, 25]

PI_1 = [40, 8, 48, 16, 56, 24, 64, 32,
        39, 7, 47, 15, 55, 23, 63, 31,
        38, 6, 46, 14, 54, 22, 62, 30,
        37, 5, 45, 13, 53, 21, 61, 29,
        36, 4, 44, 12, 52, 20, 60, 28,
        35, 3, 43, 11, 51, 19, 59, 27,
        34, 2, 42, 10, 50, 18, 58, 26,
        33, 1, 41, 9, 49, 17, 57, 25]

SHIFT = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

def text_to_bit_array(input_text):
    """Преобразует текст в массив битов."""
    bit_array = list()
    for character in input_text:
        binary_value = to_binary_value(character, 8)  # Преобразуем символ в 8-битное двоичное значение
        bit_array.extend([int(bit) for bit in list(binary_value)])  # Добавляем биты в массив
    return bit_array

def bit_array_to_text(bit_array):
    """Преобразует массив битов обратно в текст."""
    result = ''.join([chr(int(byte, 2)) for byte in [''.join([str(bit) for bit in byte_array]) for byte_array in split_array(bit_array, 8)]])
    return result

def to_binary_value(value, bit_size):
    """Преобразует значение (число или символ) в двоичную строку заданной длины."""
    binary_value = bin(value)[2:] if isinstance(value, int) else bin(ord(value))[2:]  # Преобразуем в двоичное значение
    if len(binary_value) > bit_size:
        raise Exception("Двоичное значение больше ожидаемого размера")
    while len(binary_value) < bit_size:
        binary_value = "0" + binary_value  # Дополняем нулями слева
    return binary_value

def split_array(array, size):
    """Разбивает массив на подмассивы заданного размера."""
    return [array[k:k+size] for k in range(0, len(array), size)]

ENCRYPT = 1
DECRYPT = 0

class DES:
    """Класс для реализации алгоритма DES."""
    def __init__(self):
        self.key = None  # Ключ шифрования/дешифрования (8 байт)
        self.input_text = None  # Входной текст для шифрования/дешифрования
        self.key_list = list()  # Список подключей для каждого раунда

    def execute(self, key, input_text, action=ENCRYPT):
        """Выполняет шифрование или дешифрование в зависимости от значения action."""
        if len(key) < 8:
            raise Exception("Длина ключа должна быть 8 бит") # Выбрасываем исключение, если длина ключа меньше 8
        elif len(key) > 8:
            key = key[:8] # Обрезаем ключ до 8 символов, если он длиннее

        self.key = key # Сохраняем ключ
        self.input_text = input_text # Сохраняем входной текст

        if len(self.input_text) % 8 != 0:
            raise Exception("Размер должен быть кратен 8") # Выбрасываем исключение, если длина текста не кратна 8

        self.generate_keys() # Генерируем подключи
        text_blocks = split_array(self.input_text, 8) # Разбиваем текст на блоки по 8 байт
        result = list() # Список для хранения результата
        for block in text_blocks: # Цикл по блокам текста
            block = text_to_bit_array(block) # Преобразуем блок в массив битов
            block = self.permute(block, PI) # Начальная перестановка
            left_half, right_half = split_array(block, 32) # Разбиваем блок на левую и правую части
            temp = None # Временная переменная
            for i in range(16): # 16 раундов DES
                expanded_right = self.expand(right_half, E) # Расширение правой части
                if action == ENCRYPT: # Если шифруем
                    temp = self.xor(self.key_list[i], expanded_right) # XOR с ключом раунда
                else: # Если дешифруем
                    temp = self.xor(self.key_list[15 - i], expanded_right) # XOR с обратным ключом раунда
                temp = self.substitute(temp) # Подстановка S-блоками
                temp = self.permute(temp, P) # Перестановка P
                temp = self.xor(left_half, temp) # XOR с левой частью
                left_half = right_half # Обновляем левую часть
                right_half = temp # Обновляем правую часть
            result += self.permute(right_half + left_half, PI_1) # Конечная перестановка и объединение половин
        final_result = bit_array_to_text(result) # Преобразование результата в текст
        return final_result # Возвращаем результат

    def substitute(self, expanded_right):
        """Выполняет подстановку с помощью S-блоков."""
        sub_blocks = split_array(expanded_right, 6) # Разбиваем расширенную правую часть на блоки по 6 бит
        result = list() # Список для хранения результата
        for i in range(len(sub_blocks)): # Цикл по блокам
            block = sub_blocks[i] # Текущий блок
            row = int(str(block[0]) + str(block[5]), 2) # Вычисляем номер строки в S-блоке
            column = int(''.join([str(x) for x in block[1:][:-1]]), 2) # Вычисляем номер столбца в S-блоке
            value = S_BOX[i][row][column] # Получаем значение из S-блока
            binary = to_binary_value(value, 4) # Преобразуем значение в 4-битное двоичное представление
            result += [int(bit) for bit in binary] # Добавляем биты в результат
        return result 

    def permute(self, block, table):
        """Выполняет перестановку битов в блоке по заданной таблице."""
        return [block[x - 1] for x in table]

    def expand(self, block, table):       
        """Расширяет блок по заданной таблице."""
        return [block[x - 1] for x in table] 

    def xor(self, array1, array2):
        """Выполняет операцию XOR над двумя массивами."""
        return [x ^ y for x, y in zip(array1, array2)] 

    def generate_keys(self):
        """Генерирует подключи для каждого раунда."""
        self.key_list = [] # Очищаем список ключей
        key_bits = text_to_bit_array(self.key) # Преобразуем ключ в массив битов
        key_bits = self.permute(key_bits, CP_1) # Начальная перестановка ключа
        left_half, right_half = split_array(key_bits, 28) # Разбиваем ключ на левую и правую части
        for i in range(16): # 16 раундов DES
            left_half, right_half = self.shift(left_half, right_half, SHIFT[i]) # Сдвигаем левую и правую части
            combined_key = left_half + right_half # Объединяем левую и правую части
            self.key_list.append(self.permute(combined_key, CP_2)) # Перестановка CP_2 и добавление в список ключей

    def shift(self, left_half, right_half, n):
        """Выполняет циклический сдвиг влево на n позиций для левой и правой частей ключа."""
        return left_half[n:] + left_half[:n], right_half[n:] + right_half[:n] 

    def encrypt(self, key, input_text):
        """Шифрует входной текст с использованием заданного ключа."""
        return self.execute(key, input_text, ENCRYPT) 

    def decrypt(self, key, input_text):
        """Дешифрует входной текст с использованием заданного ключа."""
        return self.execute(key, input_text, DECRYPT) 
    
if __name__ == '__main__':
    key_input = input("Введите ключ (только латиница и строго 8 символов): ") # Запрашиваем ключ у пользователя (8 символов)
    text_input = input("Введите сообщение (только латиница и строго 8 символов): ") # Запрашиваем сообщение у пользователя (8 символов)
    des_instance = DES() # Создаем экземпляр класса DES
    encrypted_result = des_instance.encrypt(key_input, text_input) # Шифруем сообщение
    decrypted_result = des_instance.decrypt(key_input, encrypted_result) # Дешифруем сообщение
    print("Encrypted message: %r" % encrypted_result) # Выводим зашифрованное сообщение
    print("Decrypted message: ", decrypted_result) # Выводим расшифрованное сообщение
